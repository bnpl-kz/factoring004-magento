<?php

declare(strict_types=1);

namespace BnplPartners\Factoring004Magento\Controller\Adminhtml\Otp;

use Magento\Backend\App\Action;
use Magento\Backend\App\Action\Context;
use Magento\Backend\Model\Session;
use Magento\Backend\Model\UrlInterface;
use Magento\Framework\App\RequestInterface;
use Magento\Framework\View\Element\AbstractBlock;
use Magento\Framework\View\Result\PageFactory;
use Magento\Shipping\Controller\Adminhtml\Order\Shipment\Save;

class Index extends Action
{
    public const ADMIN_RESOURCE = 'BnplPartners_Factoring004::admin';

    /**
     * @var PageFactory
     */
    private $resultPageFactory;

    /**
     * @var \Magento\Shipping\Controller\Adminhtml\Order\Shipment\Save
     */
    private $shipmentSaveAction;

    /**
     * @var \Magento\Backend\Model\Session
     */
    private $session;

    public function __construct(
        Context $context,
        PageFactory $resultPageFactory,
        Save $shipmentSaveAction,
        Session $session
    ) {
        parent::__construct($context);

        $this->resultPageFactory = $resultPageFactory;
        $this->shipmentSaveAction = $shipmentSaveAction;
        $this->session = $session;

        // We should substitute params before call any methods on shipment action
        if ($this->getRequest()->isPost()) {
            $this->substituteRequestParamsToShipmentData();
        }
    }

    protected function _getSession()
    {
        if ($this->getRequest()->isPost()) {
            return $this->shipmentSaveAction->_getSession();
        }

        return parent::_getSession();
    }

    public function dispatch(RequestInterface $request)
    {
        if ($this->getRequest()->isPost()) {
            return $this->shipmentSaveAction->dispatch($request);
        }

        return parent::dispatch($request);
    }

    public function getUrl($route = '', $params = [])
    {
        if ($this->getRequest()->isPost()) {
            return $this->shipmentSaveAction->getUrl($route, $params);
        }

        return parent::getUrl($route, $params);
    }

    protected function _isAllowed()
    {
        if ($this->getRequest()->isPost()) {
            return $this->shipmentSaveAction->_isAllowed();
        }

        return parent::_isAllowed();
    }

    protected function getMessageManager()
    {
        if ($this->getRequest()->isPost()) {
            return $this->shipmentSaveAction->getMessageManager();
        }

        return parent::getMessageManager();
    }

    protected function _setActiveMenu($itemId)
    {
        if ($this->getRequest()->isPost()) {
            return $this->shipmentSaveAction->_setActiveMenu($itemId);
        }

        return parent::_setActiveMenu($itemId);
    }

    protected function _addBreadcrumb($label, $title, $link = null)
    {
        if ($this->getRequest()->isPost()) {
            return $this->shipmentSaveAction->_addBreadcrumb($label, $title, $link);
        }

        return parent::_addBreadcrumb($label, $title, $link);
    }

    protected function _addContent(AbstractBlock $block)
    {
        if ($this->getRequest()->isPost()) {
            return $this->shipmentSaveAction->_addContent($block);
        }

        return parent::_addContent($block);
    }

    protected function _addLeft(AbstractBlock $block)
    {
        if ($this->getRequest()->isPost()) {
            return $this->shipmentSaveAction->_addLeft($block);
        }

        return parent::_addLeft($block);
    }

    protected function _addJs(AbstractBlock $block)
    {
        if ($this->getRequest()->isPost()) {
            return $this->shipmentSaveAction->_addJs($block);
        }

        return parent::_addJs($block);
    }

    protected function _isUrlChecked()
    {
        if ($this->getRequest()->isPost()) {
            return $this->shipmentSaveAction->_isUrlChecked();
        }

        return parent::_isUrlChecked();
    }

    protected function _processLocaleSettings()
    {
        if ($this->getRequest()->isPost()) {
            return $this->shipmentSaveAction->_processLocaleSettings();
        }

        return parent::_processLocaleSettings();
    }

    protected function _redirect($path, $arguments = [])
    {
        if ($this->getRequest()->isPost()) {
            return $this->shipmentSaveAction->_redirect($path, $arguments);
        }

        return parent::_redirect($path, $arguments);
    }

    protected function _forward($action, $controller = null, $module = null, array $params = null)
    {
        parent::_forward($action, $controller, $module, $params); // TODO: Change the autogenerated stub
    }

    protected function _validateSecretKey()
    {
        if ($this->getRequest()->isPost()) {
            return $this->shipmentSaveAction->_validateSecretKey();
        }

        return parent::_validateSecretKey();
    }

    public function getActionFlag()
    {
        if ($this->getRequest()->isPost()) {
            return $this->shipmentSaveAction->getActionFlag();
        }

        return parent::getActionFlag();
    }

    public function _processUrlKeys()
    {
        if ($this->getRequest()->isPost()) {
            return $this->shipmentSaveAction->_processUrlKeys();
        }

        return parent::_processUrlKeys();
    }

    /**
     * @throws \Exception
     */
    public function execute()
    {
        if ($this->getRequest()->isPost()) {
            return $this->shipmentSaveAction->execute();
        }

        return $this->resultPageFactory->create();
    }

    private function substituteRequestParamsToShipmentData(): void
    {
        $params = $this->session->getShipmentData() ?? [];

        $this->getRequest()->setParams(array_merge($params, [
            'form_key' => $this->getRequest()->getParam('form_key'),
            'key' => $this->shipmentSaveAction->_backendUrl->getSecretKey(),
        ]));
    }
}
